AWSTemplateFormatVersion: "2010-09-09"

Description: (Demo Purpose Only) Shot Detection Demo - demonstrates how to use Amazon Rekognition Segment API to detect camera shots and technical cues in video.

Mappings:
    Solution:
        Project:
            Id: ML9801
            LowerCaseId: ml9801
            Version: "%VERSION%"
        Template:
            S3Bucket: "%BUCKET%"
            KeyPrefix: "%KEYPREFIX%"
            SingleRegion: "%SINGLE_REGION%"
        Package:
            CustomResourceX: "%PKG_CUSTOM_RESOURCES%"
            ShotDetection: "%PKG_SHOT_DETECTION%"
            StatusUpdater: "%PKG_STATUS_UPDATER%"
            Api: "%PKG_API%"
            WebApp: "%PKG_WEBAPP%"
        Layer:
            AwsSdk: "%LAYER_AWSSDK%"
            CoreLib: "%LAYER_CORE_LIB%"
            Mediainfo: "%LAYER_MEDIAINFO%"
        APIGateway:
            StageName: demo
        SNS:
            ServiceTopic: ServiceSNS
    DynamoDB:
        ServiceToken:
            PartitionKey: id
            SortKey: keyword
    Node:
        Runtime:
            Version: nodejs10.x

Parameters:
    Email:
        Type: String
        Description: Email address of the user that will be created in the Amazon Cognito User Pool to access the demo portal.
        AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    PriceClass:
        Type: String
        Description: Specify the price class of the edge location from which CloudFront serves your requests. For more information, see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html
        AllowedValues:
            - Use Only U.S., Canada and Europe [PriceClass_100]
            - Use U.S., Canada, Europe, Asia and Africa [PriceClass_200]
            - Use All Edge Locations (Best Performance) [PriceClass_All]
        Default: Use Only U.S., Canada and Europe [PriceClass_100]

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: Amazon Cognito Configuration
                Parameters:
                    - Email
            -
                Label:
                    default: Amazon S3 / Amazon CloudFront Configuration
                Parameters:
                    - PriceClass
        ParameterLabels:
            PriceClass:
                default: Price Class
            Email:
                default: Email

Conditions:
    bSingleRegion: !Equals [
        !FindInMap [
            "Solution",
            "Template",
            "SingleRegion"
        ],
        "true"
    ]
    bUSEast1: !Equals [
        !Ref "AWS::Region",
        "us-east-1"
    ]

Resources:
    ################################################################################
    #
    # CloudFormation Custom Resource lambda
    # * Used during Stack create, update, and delete
    #
    ################################################################################
    CustomResourceRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: This wildcard is present as the custom resource lambda needs to be able to access contents within the bucket!
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: "sts:AssumeRole"
                        Principal:
                            Service: "lambda.amazonaws.com"
            Path: !Sub [
                "/${x0}/", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${x1}-shot-detection-custom-resources", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ],
                            x1: !Select [
                                4,
                                !Split [
                                    "-",
                                    !Select [
                                        2,
                                        !Split [
                                            "/",
                                            !Sub "${AWS::StackId}"
                                        ]
                                    ]
                                ]
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## S3
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:ListBucket"
                                    - "s3:GetBucketCORS"
                                    - "s3:PutBucketCORS"
                                # This wildcard is present because of circular dependency where
                                # the buckets aren't known before this custom resource lambda function
                                # is created.
                                Resource: !Sub [
                                    "arn:aws:s3:::${x0}-*", {
                                        x0: !FindInMap [
                                            "Solution",
                                            "Project",
                                            "LowerCaseId"
                                        ]
                                    }
                                ]
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                    - "s3:PutObject"
                                    - "s3:DeleteObject"
                                # This wildcard is present because of circular dependency where
                                # the buckets aren't known before this custom resource lambda function
                                # is created.
                                Resource: !Sub [
                                    "arn:aws:s3:::${x0}-*/*", {
                                        x0: !FindInMap [
                                            "Solution",
                                            "Project",
                                            "LowerCaseId"
                                        ]
                                    }
                                ]
                            -
                                Effect: "Allow"
                                Action: "s3:GetObject"
                                Resource: !Sub [
                                    "arn:aws:s3:::${x0}/${x1}/${x2}", {
                                        x0: !FindInMap [
                                            "Solution",
                                            "Template",
                                            "S3Bucket"
                                        ],
                                        x1: !FindInMap [
                                            "Solution",
                                            "Template",
                                            "KeyPrefix"
                                        ],
                                        x2: !FindInMap [
                                            "Solution",
                                            "Package",
                                            "WebApp"
                                        ]
                                    }
                                ]
                            ## CloudWatch Logs
                            -
                                Effect: "Allow"
                                Action:
                                    - "logs:CreateLogGroup"
                                    - "logs:CreateLogStream"
                                    - "logs:PutLogEvents"
                                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                            ## Cognito
                            -
                                Effect: "Allow"
                                Action: "cognito-idp:AdminCreateUser"
                                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
                            # IAM - required by AdminCreateUser
                            -
                                Effect: "Allow"
                                Action: "iam:PassRole"
                                Resource: !Sub [
                                    "arn:aws:iam::${AWS::AccountId}:role/${x0}/${AWS::StackName}-CustomResourceRole-*", {
                                        x0: !FindInMap [
                                            "Solution",
                                            "Project",
                                            "LowerCaseId"
                                        ]
                                    }
                                ]
                            ## MediaConvert
                            -
                                Effect: "Allow"
                                Action: "mediaConvert:DescribeEndpoints"
                                Resource: !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:*"

    CustomResourceLambda:
        Type: AWS::Lambda::Function
        Properties:
            Description: !Sub [
                "(${x0}) shot detection custom resources", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            Runtime: !FindInMap [
                "Node",
                "Runtime",
                "Version"
            ]
            MemorySize: 256
            Timeout: 900
            Handler: index.handler
            Role: !GetAtt CustomResourceRole.Arn
            Code:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Solution",
                            "Package",
                            "CustomResourceX"
                        ]
                    }
                ]


    ################################################################################
    #
    # Bucket resources
    # * Logs and Source (to store training and processing images)
    #
    ################################################################################
    LogsBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
            BucketName: !Sub [
                "${x0}-${x1}-${AWS::AccountId}-${AWS::Region}-logs", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    -
                      ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            AccessControl: LogDeliveryWrite
            LifecycleConfiguration:
                Rules:
                    -
                        Id: Keep access logs for 30 days
                        Status: Enabled
                        Prefix: /
                        ExpirationInDays: 30
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 1
            Tags:
                -
                    Key: SolutionId
                    Value: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
            VersioningConfiguration:
                Status: Enabled

    LogsBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref LogsBucket
            PolicyDocument:
                Statement:
                    -
                        Effect: Deny
                        Principal: "*"
                        Action: "*"
                        Resource: !Sub "arn:aws:s3:::${LogsBucket}/*"
                        Condition:
                            Bool:
                                "aws:SecureTransport": false

    SourceBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
            BucketName: !Sub [
                "${x0}-${x1}-${AWS::AccountId}-${AWS::Region}-source", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    -
                      ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            AccelerateConfiguration:
                AccelerationStatus: Enabled
            AccessControl: LogDeliveryWrite
            LoggingConfiguration:
                DestinationBucketName: !Ref LogsBucket
                LogFilePrefix: "access_logs_source_bucket/"
            CorsConfiguration:
                CorsRules:
                    -
                        AllowedMethods:
                            - HEAD
                            - GET
                            - PUT
                            - POST
                        AllowedOrigins:
                            - "*"
                        AllowedHeaders:
                            - "*"
                        ExposedHeaders:
                            - ETag
                            - "Content-Length"
                        MaxAge: 3000
            LifecycleConfiguration:
                Rules:
                    -
                        Id: Use Intelligent tier
                        Status: Enabled
                        Transitions:
                            -
                                StorageClass: INTELLIGENT_TIERING
                                TransitionInDays: 0
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 7
                    -
                        Id: Keep previous version for 7 days
                        Status: Enabled
                        NoncurrentVersionExpirationInDays: 7
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 1
            Tags:
                -
                    Key: SolutionId
                    Value: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
            VersioningConfiguration:
                Status: Enabled

    SourceBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref SourceBucket
            PolicyDocument:
                Statement:
                    -
                        Effect: Deny
                        Principal: "*"
                        Action: "*"
                        Resource: !Sub "arn:aws:s3:::${SourceBucket}/*"
                        Condition:
                            Bool:
                                "aws:SecureTransport": false
                    # Amazon Rekognition Custom Labels specific
                    -
                        Effect: Allow
                        Principal:
                            Service: "rekognition.amazonaws.com"
                        Action:
                            - "s3:GetBucketAcl"
                            - "s3:GetBucketLocation"
                        Resource: !Sub "arn:aws:s3:::${SourceBucket}"
                    -
                        Effect: Allow
                        Principal:
                            Service: "rekognition.amazonaws.com"
                        Action:
                            - "s3:GetObject"
                            - "s3:GetObjectAcl"
                            - "s3:GetObjectVersion"
                            - "s3:GetObjectTagging"
                        Resource: !Sub "arn:aws:s3:::${SourceBucket}/*"
                    -
                        Effect: Allow
                        Principal:
                            Service: "rekognition.amazonaws.com"
                        Action: "s3:PutObject"
                        Resource: !Sub "arn:aws:s3:::${SourceBucket}/*"
                        Condition:
                            StringEquals:
                                "s3:x-amz-acl": "bucket-owner-full-control"


    ################################################################################
    #
    # Amazon Lambda Layers
    # * AWS SDK
    # * Core Library
    # * Mediainfo
    #
    ################################################################################
    AwsSdkLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            LayerName: !Sub [
                "${x0}-${x1}-layer-aws-sdk", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            CompatibleRuntimes:
                - nodejs10.x
                - nodejs12.x
            Content:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Solution",
                            "Layer",
                            "AwsSdk"
                        ]
                    }
                ]
            Description: !Sub [
                "${x0} ${AWS::StackName} aws-sdk layer", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            LicenseInfo: MIT-0

    CoreLibLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            LayerName: !Sub [
                "${x0}-${x1}-layer-core-lib", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            CompatibleRuntimes:
                - nodejs10.x
                - nodejs12.x
            Content:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Solution",
                            "Layer",
                            "CoreLib"
                        ]
                    }
                ]
            Description: !Sub [
                "${x0} ${AWS::StackName} core library layer", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            LicenseInfo: MIT-0

    MediainfoLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            LayerName: !Sub [
                "${x0}-${x1}-layer-mediainfo", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            CompatibleRuntimes:
                - nodejs10.x
                - nodejs12.x
            Content:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Solution",
                            "Layer",
                            "Mediainfo"
                        ]
                    }
                ]
            Description: !Sub [
                "${x0} ${AWS::StackName} mediainfo layer", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            LicenseInfo: MIT-0


    ################################################################################
    #
    # Amazon Simple Notification Service (SNS)
    # * SNS topic is used by Amazon Rekognition to send notification to the workflow
    #
    ################################################################################
    ServiceTopic:
        Type: AWS::SNS::Topic
        Properties:
            TopicName: !Sub [
                "${x0}-${x1}-service-token", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            DisplayName: !FindInMap [
                "Solution",
                "SNS",
                "ServiceTopic"
            ]
            KmsMasterKeyId: "alias/aws/sns"

    ServiceTopicPolicy:
        Type: AWS::SNS::TopicPolicy
        Properties:
            Topics:
                - !Ref ServiceTopic
            PolicyDocument:
                Id: !Sub [
                    "${x0}-${x1}-service-token-id", {
                        x0: !FindInMap [
                            "Solution",
                            "Project",
                            "LowerCaseId"
                        ],
                        x1: !Select [
                            4,
                            !Split [
                                "-",
                                !Select [
                                    2,
                                    !Split [
                                        "/",
                                        !Sub "${AWS::StackId}"
                                    ]
                                ]
                            ]
                        ]
                    }
                ]
                Version: "2012-10-17"
                Statement:
                    -
                        Sid: "allow-services-publish-sns"
                        Effect: "Allow"
                        Principal:
                            Service: "rekognition.amazonaws.com"
                        Action: "sns:Publish"
                        Resource: !Ref ServiceTopic

    ServiceTopicRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: "sts:AssumeRole"
                        Principal:
                            Service: "rekognition.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${x1}-services-sns-role", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ],
                            x1: !Select [
                                4,
                                !Split [
                                    "-",
                                    !Select [
                                        2,
                                        !Split [
                                            "/",
                                            !Sub "${AWS::StackId}"
                                        ]
                                    ]
                                ]
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action: "sns:Publish"
                                Resource: !Ref ServiceTopic


    ################################################################################
    #
    # AWS Elemental MediaConvert
    # * MediaConvert is used by the workflow to create proxy video such that
    #   the solution can support wider range of input formats
    #
    ################################################################################
    MediaConvertRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: "sts:AssumeRole"
                        Principal:
                            Service: "mediaconvert.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${x1}-mediaconvert-role", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ],
                            x1: !Select [
                                4,
                                !Split [
                                    "-",
                                    !Select [
                                        2,
                                        !Split [
                                            "/",
                                            !Sub "${AWS::StackId}"
                                        ]
                                    ]
                                ]
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            # S3 read/write object
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                    - "s3:PutObject"
                                Resource: !Sub "arn:aws:s3:::${SourceBucket}/*"

    # (Custom Resource) to describe MediaConvert Endpoint, returns
    #   * Endpoint
    #   * Status
    DescribeMediaConvert:
        Type: Custom::DescribeMediaConvert
        Properties:
            ServiceToken: !GetAtt CustomResourceLambda.Arn


    ################################################################################
    #
    # Amazon DynamoDB
    # * a DynamoDB table is used by the workflow to temporarily store Amazon Step
    #   Functions state token such that we can use Service Integration technique
    #   to send event to the state machine when Rekognition Segment detection is
    #   completed.
    #
    ################################################################################
    ServiceTokenTable:
        Type: AWS::DynamoDB::Table
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W28
                        reason: "Table name is constructed with stack name. On update, we need to keep the existing table name."
        Properties:
            TableName: !Sub [
                "${x0}-${x1}-service-token", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            BillingMode: "PAY_PER_REQUEST"
            AttributeDefinitions:
                -
                    AttributeName: !FindInMap [
                        "DynamoDB",
                        "ServiceToken",
                        "PartitionKey"
                    ]
                    AttributeType: "S"
                -
                    AttributeName: !FindInMap [
                        "DynamoDB",
                        "ServiceToken",
                        "SortKey"
                    ]
                    AttributeType: "S"
            KeySchema:
                -
                    AttributeName: !FindInMap [
                        "DynamoDB",
                        "ServiceToken",
                        "PartitionKey"
                    ]
                    KeyType: HASH
                -
                    AttributeName: !FindInMap [
                        "DynamoDB",
                        "ServiceToken",
                        "SortKey"
                    ]
                    KeyType: RANGE
            SSESpecification:
                SSEEnabled: true
            PointInTimeRecoverySpecification:
                PointInTimeRecoveryEnabled: true
            TimeToLiveSpecification:
                AttributeName: ttl
                Enabled: true

    ################################################################################
    #
    # AWS Step Functions state machine
    # * State machine role
    # * State machine Lambda role
    # * State machine definition
    #
    ################################################################################
    StateMachineRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: "sts:AssumeRole"
                        Principal:
                            Service: !Sub "states.${AWS::Region}.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${x1}-statemachine-service-role", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ],
                            x1: !Select [
                                4,
                                !Split [
                                    "-",
                                    !Select [
                                        2,
                                        !Split [
                                            "/",
                                            !Sub "${AWS::StackId}"
                                        ]
                                    ]
                                ]
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: "Allow"
                                Action: "lambda:InvokeFunction"
                                Resource: !Sub [
                                    "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${x0}-${x1}-*", {
                                        x0: !FindInMap [
                                            "Solution",
                                            "Project",
                                            "LowerCaseId"
                                        ],
                                        x1: !Select [
                                            4,
                                            !Split [
                                                "-",
                                                !Select [
                                                    2,
                                                    !Split [
                                                        "/",
                                                        !Sub "${AWS::StackId}"
                                                    ]
                                                ]
                                            ]
                                        ]
                                    }
                                ]

    ShotDetectionLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: "sts:AssumeRole"
                        Principal:
                            Service: "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${x1}-shot-detection-role", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ],
                            x1: !Select [
                                4,
                                !Split [
                                    "-",
                                    !Select [
                                        2,
                                        !Split [
                                            "/",
                                            !Sub "${AWS::StackId}"
                                        ]
                                    ]
                                ]
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## S3
                            -
                                Effect: "Allow"
                                Action: "s3:ListBucket"
                                Resource: !Sub "arn:aws:s3:::${SourceBucket}"
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                    - "s3:PutObject"
                                    - "s3:SelectObjectContent"
                                Resource: !Sub "arn:aws:s3:::${SourceBucket}/*"
                            ## MediaConvert
                            -
                                Effect: "Allow"
                                Action: "mediaConvert:CreateJob"
                                Resource: !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:queues/Default"
                            -
                                Effect: "Allow"
                                Action: "mediaConvert:GetJob"
                                Resource: !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:jobs/*"
                            -
                                ## PassRole required by MediaConvert
                                Effect: "Allow"
                                Action:
                                    - "iam:GetRole"
                                    - "iam:PassRole"
                                Resource: !GetAtt MediaConvertRole.Arn
                            ## CloudWatch Logs
                            -
                                Effect: "Allow"
                                Action:
                                    - "logs:CreateLogGroup"
                                    - "logs:CreateLogStream"
                                    - "logs:PutLogEvents"
                                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

                            ## DynamoDB
                            -
                                Effect: "Allow"
                                Action:
                                    - "dynamodb:DeleteItem"
                                    - "dynamodb:DescribeTable"
                                    - "dynamodb:Query"
                                    - "dynamodb:Scan"
                                    - "dynamodb:UpdateItem"
                                    - "dynamodb:Attributes"
                                    - "dynamodb:LeadingKeys"
                                    - "dynamodb:ReturnConsumedCapacity"
                                    - "dynamodb:ReturnValues"
                                    - "dynamodb:Select"
                                Resource: !Sub [
                                    "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${x0}-${x1}-*", {
                                        x0: !FindInMap [
                                            "Solution",
                                            "Project",
                                            "LowerCaseId"
                                        ],
                                        x1: !Select [
                                            4,
                                            !Split [
                                                "-",
                                                !Select [
                                                    2,
                                                    !Split [
                                                        "/",
                                                        !Sub "${AWS::StackId}"
                                                    ]
                                                ]
                                            ]
                                        ]
                                    }
                                ]
                            ## Rekognition
                            -
                                Effect: "Allow"
                                Action:
                                    - "rekognition:StartSegmentDetection"
                                    - "rekognition:GetSegmentDetection"
                                Resource: !Join ["", ["*"]]
                            ## IAM
                            -
                                Effect: "Allow"
                                Action: "iam:PassRole"
                                Resource: !GetAtt ServiceTopicRole.Arn

    ShotDetectionLambda:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub [
                "${x0}-${x1}-shot-detection", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            Description: !Sub [
                "(${x0}) shot detection state machine lambda", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            Runtime: !FindInMap [
                "Node",
                "Runtime",
                "Version"
            ]
            MemorySize: 128
            Timeout: 900
            Handler: index.handler
            Role: !GetAtt ShotDetectionLambdaRole.Arn
            Code:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Solution",
                            "Package",
                            "ShotDetection"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
                - !Ref MediainfoLayer
            Environment:
                Variables:
                    ENV_SOLUTION_UUID: !Select [
                        2,
                        !Split [
                            "/",
                            !Sub "${AWS::StackId}"
                        ]
                    ]
                    ENV_MEDIACONVERT_HOST: !GetAtt DescribeMediaConvert.Endpoint
                    ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_SERVICE_TOPIC_ROLE_ARN: !GetAtt ServiceTopicRole.Arn
                    ENV_SERVICE_TOPIC_ARN: !Ref ServiceTopic
                    ENV_SERVICE_TOKEN_TABLE: !Ref ServiceTokenTable
                    ENV_SERVICE_TOKEN_TABLE_PARTITION_KEY: !FindInMap [
                        "DynamoDB",
                        "ServiceToken",
                        "PartitionKey"
                    ]
                    ENV_SERVICE_TOKEN_TABLE_SORT_KEY: !FindInMap [
                        "DynamoDB",
                        "ServiceToken",
                        "SortKey"
                    ]

    ShotDetectionLambdaLarge:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub [
                "${x0}-${x1}-shot-detection-large", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            Description: !Sub [
                "(${x0}) shot detection state machine (large) lambda used by mediainfo", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            Runtime: !FindInMap [
                "Node",
                "Runtime",
                "Version"
            ]
            MemorySize: 1024
            Timeout: 900
            Handler: index.handler
            Role: !GetAtt ShotDetectionLambdaRole.Arn
            Code:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Solution",
                            "Package",
                            "ShotDetection"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
                - !Ref MediainfoLayer
            Environment:
                Variables:
                    ENV_SOLUTION_UUID: !Select [
                        2,
                        !Split [
                            "/",
                            !Sub "${AWS::StackId}"
                        ]
                    ]
                    ENV_MEDIACONVERT_HOST: !GetAtt DescribeMediaConvert.Endpoint
                    ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_SERVICE_TOPIC_ROLE_ARN: !GetAtt ServiceTopicRole.Arn
                    ENV_SERVICE_TOPIC_ARN: !Ref ServiceTopic
                    ENV_SERVICE_TOKEN_TABLE: !Ref ServiceTokenTable
                    ENV_SERVICE_TOKEN_TABLE_PARTITION_KEY: !FindInMap [
                        "DynamoDB",
                        "ServiceToken",
                        "PartitionKey"
                    ]
                    ENV_SERVICE_TOKEN_TABLE_SORT_KEY: !FindInMap [
                        "DynamoDB",
                        "ServiceToken",
                        "SortKey"
                    ]

    ShotDetectionStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub [
                "${x0}-${x1}-shot-detection", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            RoleArn: !GetAtt StateMachineRole.Arn
            DefinitionString:
                !Sub
                    - |-
                        {
                            "StartAt": "Run mediainfo",
                            "States": {
                                "Run mediainfo": {
                                    "Type": "Task",
                                    "Resource": "${x1}",
                                    "Parameters": {
                                        "state": "run-mediainfo",
                                        "input.$": "$.input"
                                    },
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 2,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Next": "Start mediaconvert and wait"
                                },
                                "Start mediaconvert and wait": {
                                    "Type": "Task",
                                    "Resource":"arn:aws:states:::lambda:invoke.waitForTaskToken",
                                    "Parameters": {
                                        "FunctionName": "${a0}",
                                        "Payload": {
                                            "token.$":"$$.Task.Token",
                                            "state": "start-mediaconvert",
                                            "input.$": "$.input",
                                            "output.$": "$.output"
                                        }
                                    },
                                    "TimeoutSeconds": 10800,
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 4,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Next": "Start segment detection and wait"
                                },
                                "Start segment detection and wait": {
                                    "Type": "Task",
                                    "Resource":"arn:aws:states:::lambda:invoke.waitForTaskToken",
                                    "Parameters": {
                                        "FunctionName": "${a0}",
                                        "Payload": {
                                            "token.$":"$$.Task.Token",
                                            "state": "start-segment-detection",
                                            "input.$": "$.input",
                                            "output.$": "$.output"
                                        }
                                    },
                                    "TimeoutSeconds": 10800,
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 4,
                                            "BackoffRate": 1.2
                                        }
                                    ],
                                    "Next": "Collect detection results"
                                },
                                "Collect detection results": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "state": "collect-detection-results",
                                        "input.$": "$.input",
                                        "output.$": "$.output"
                                    },
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 6,
                                            "BackoffRate": 1.1
                                        }
                                    ],
                                    "Next": "Create timeline"
                                },
                                "Create timeline": {
                                    "Type": "Task",
                                    "Resource": "${x0}",
                                    "Parameters": {
                                        "state": "create-timeline",
                                        "input.$": "$.input",
                                        "output.$": "$.output"
                                    },
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "States.ALL"
                                            ],
                                            "IntervalSeconds": 1,
                                            "MaxAttempts": 6,
                                            "BackoffRate": 1.1
                                        }
                                    ],
                                    "End": true
                                }
                            }
                        }
                    -
                        {
                            a0: !Ref ShotDetectionLambda,
                            x0: !GetAtt ShotDetectionLambda.Arn,
                            x1: !GetAtt ShotDetectionLambdaLarge.Arn
                        }

    ################################################################################
    #
    # Amazon CloudWatch Event, used to support AWS Step Functions Service Integration
    # * State machine role
    # * State machine Lambda role
    # * State machine definition
    #
    ################################################################################
    StatusUpdaterRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: "sts:AssumeRole"
                        Principal:
                            Service: "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${x1}-status-updater", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ],
                            x1: !Select [
                                4,
                                !Split [
                                    "-",
                                    !Select [
                                        2,
                                        !Split [
                                            "/",
                                            !Sub "${AWS::StackId}"
                                        ]
                                    ]
                                ]
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## CloudWatch Logs
                            -
                                Effect: "Allow"
                                Action:
                                    - "logs:CreateLogGroup"
                                    - "logs:CreateLogStream"
                                    - "logs:PutLogEvents"
                                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                            ## Step Functions
                            -
                                Effect: "Allow"
                                Action:
                                    - "states:SendTaskSuccess"
                                    - "states:SendTaskFailure"
                                Resource: !Ref ShotDetectionStateMachine
                            ## DynamoDB - allow to fetch step functions state token
                            -
                                Effect: "Allow"
                                Action:
                                    - "dynamodb:DeleteItem"
                                    - "dynamodb:DescribeTable"
                                    - "dynamodb:Query"
                                    - "dynamodb:UpdateItem"
                                Resource: !Sub [
                                    "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${x0}-${x1}-*", {
                                        x0: !FindInMap [
                                            "Solution",
                                            "Project",
                                            "LowerCaseId"
                                        ],
                                        x1: !Select [
                                            4,
                                            !Split [
                                                "-",
                                                !Select [
                                                    2,
                                                    !Split [
                                                        "/",
                                                        !Sub "${AWS::StackId}"
                                                    ]
                                                ]
                                            ]
                                        ]
                                    }
                                ]

    StatusUpdaterLambda:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub [
                "${x0}-${x1}-status-updater", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            Description: !Sub [
                "(${x0}) status updater", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            Runtime: !FindInMap [
                "Node",
                "Runtime",
                "Version"
            ]
            MemorySize: 128
            Timeout: 900
            Handler: index.handler
            Role: !GetAtt StatusUpdaterRole.Arn
            Code:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Solution",
                            "Package",
                            "StatusUpdater"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer
            Environment:
                Variables:
                    ENV_SOLUTION_UUID: !Select [
                        2,
                        !Split [
                            "/",
                            !Sub "${AWS::StackId}"
                        ]
                    ]
                    ENV_MEDIACONVERT_HOST: !GetAtt DescribeMediaConvert.Endpoint
                    ENV_MEDIACONVERT_ROLE: !GetAtt MediaConvertRole.Arn
                    ENV_SERVICE_TOPIC_ROLE_ARN: !GetAtt ServiceTopicRole.Arn
                    ENV_SERVICE_TOPIC_ARN: !Ref ServiceTopic
                    ENV_SERVICE_TOKEN_TABLE: !Ref ServiceTokenTable
                    ENV_SERVICE_TOKEN_TABLE_PARTITION_KEY: !FindInMap [
                        "DynamoDB",
                        "ServiceToken",
                        "PartitionKey"
                    ]
                    ENV_SERVICE_TOKEN_TABLE_SORT_KEY: !FindInMap [
                        "DynamoDB",
                        "ServiceToken",
                        "SortKey"
                    ]

    TranscodeStatusChangeRule:
        Type: AWS::Events::Rule
        Properties:
            Name: !Sub [
                "${x0}-${x1}-transcode-status-rule", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            Description: !Sub [
                "(${x0}) mediaconvert transcode status change event", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            EventPattern:
                source:
                    - "aws.mediaconvert"
                region:
                    - !Sub "${AWS::Region}"
                detail-type:
                    - "MediaConvert Job State Change"
                detail:
                    status:
                        - COMPLETE
                        - CANCELED
                        - ERROR
                    userMetadata:
                        solutionUuid:
                            - !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
            State: ENABLED
            Targets:
                -
                    Id: !Sub "Id-${StatusUpdaterLambda}"
                    Arn: !GetAtt StatusUpdaterLambda.Arn

    TranscodeStatusChangePermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref StatusUpdaterLambda
            Action: lambda:InvokeFunction
            Principal: events.amazonaws.com
            SourceArn: !GetAtt TranscodeStatusChangeRule.Arn

    ServiceTopicSubscription:
        Type: AWS::SNS::Subscription
        Properties:
            Protocol: lambda
            TopicArn: !Ref ServiceTopic
            Endpoint: !GetAtt StatusUpdaterLambda.Arn

    ServiceTopicPermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref StatusUpdaterLambda
            Action: lambda:InvokeFunction
            Principal: sns.amazonaws.com
            SourceArn: !Ref ServiceTopic

    ################################################################################
    #
    # API Gateway resources
    # * IAM roles, Lambda, API Access Logs, RESTful API endpoint, and API Deployment
    #
    ################################################################################
    ApiRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as the custom resource lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Action: "sts:AssumeRole"
                        Principal:
                            Service: "lambda.amazonaws.com"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-${x1}-shot-detection-api", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ],
                            x1: !Select [
                                4,
                                !Split [
                                    "-",
                                    !Select [
                                        2,
                                        !Split [
                                            "/",
                                            !Sub "${AWS::StackId}"
                                        ]
                                    ]
                                ]
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## CloudWatch Logs
                            -
                                Effect: "Allow"
                                Action:
                                    - "logs:CreateLogGroup"
                                    - "logs:CreateLogStream"
                                    - "logs:PutLogEvents"
                                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                            ## S3
                            -
                                Effect: Allow
                                Action: "s3:ListBucket"
                                Resource: !Sub "arn:aws:s3:::${SourceBucket}"
                            -
                                Effect: Allow
                                Action:
                                    - "s3:GetObject"
                                    - "s3:GetObjectAcl"
                                    - "s3:GetObjectVersion"
                                    - "s3:GetObjectTagging"
                                    - "s3:PutObject"
                                Resource: !Sub "arn:aws:s3:::${SourceBucket}/*"
                            ## Step Functions - start/stop/describe state machine & executions
                            -
                                Effect: "Allow"
                                Action:
                                    - "states:DescribeStateMachine"
                                    - "states:StartExecution"
                                    - "states:ListExecutions"
                                Resource: !Sub [
                                    "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${x0}-${x1}-shot-detection", {
                                        x0: !FindInMap [
                                            "Solution",
                                            "Project",
                                            "LowerCaseId"
                                        ],
                                        x1: !Select [
                                            4,
                                            !Split [
                                                "-",
                                                !Select [
                                                    2,
                                                    !Split [
                                                        "/",
                                                        !Sub "${AWS::StackId}"
                                                    ]
                                                ]
                                            ]
                                        ]
                                    }
                                ]
                            -
                                Effect: "Allow"
                                Action:
                                    - "states:DescribeExecution"
                                    - "states:StopExecution"
                                    - "states:GetExecutionHistory"
                                Resource: !Sub [
                                    "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${x0}-${x1}-shot-detection:*", {
                                        x0: !FindInMap [
                                            "Solution",
                                            "Project",
                                            "LowerCaseId"
                                        ],
                                        x1: !Select [
                                            4,
                                            !Split [
                                                "-",
                                                !Select [
                                                    2,
                                                    !Split [
                                                        "/",
                                                        !Sub "${AWS::StackId}"
                                                    ]
                                                ]
                                            ]
                                        ]
                                    }
                                ]

    ApiLambda:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub [
                "${x0}-${x1}-shot-detection-api", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            Description: !Sub [
                "(${x0}) Handle POST requests", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            Runtime: !FindInMap [
                "Node",
                "Runtime",
                "Version"
            ]
            MemorySize: 256
            Timeout: 900
            Handler: index.handler
            Role: !GetAtt ApiRole.Arn
            Code:
                S3Bucket: !Sub [
                    "${x0}${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "S3Bucket"
                        ],
                        x1: !If [
                            bSingleRegion,
                            "",
                            !Sub "-${AWS::Region}"
                        ]
                    }
                ]
                S3Key: !Sub [
                    "${x0}/${x1}", {
                        x0: !FindInMap [
                            "Solution",
                            "Template",
                            "KeyPrefix"
                        ],
                        x1: !FindInMap [
                            "Solution",
                            "Package",
                            "Api"
                        ]
                    }
                ]
            Layers:
                - !Ref AwsSdkLayer
                - !Ref CoreLibLayer

    ApiErrorLogRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service: "apigateway.amazonaws.com"
                        Action: "sts:AssumeRole"
            Path: /
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

    ApiAccount:
        Type: AWS::ApiGateway::Account
        Properties:
            CloudWatchRoleArn: !GetAtt ApiErrorLogRole.Arn

    RestApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Description: !Sub [
                "(${x0}) RESTful API endpoints to start, stop, describe Step Functions state machine", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            Body:
                swagger: "2.0"
                info:
                    version: "2018-08-03T20:13:00Z"
                    title: !Sub [
                        "${x0}-shot-detection-api", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ]
                        }
                    ]
                basePath: !Sub [
                    "/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "APIGateway",
                            "StageName"
                        ]
                    }
                ]
                schemes:
                    - "https"
                paths:
                    /{operation}:
                        options:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                                    headers:
                                        Access-Control-Allow-Origin:
                                            type: "string"
                                        Access-Control-Allow-Methods:
                                            type: "string"
                                        Access-Control-Allow-Headers:
                                            type: "string"
                            x-amazon-apigateway-integration:
                                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}/invocations"
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                        get:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - sigv4: []
                            x-amazon-apigateway-integration:
                                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}/invocations"
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                        post:
                            produces:
                                - "application/json"
                            parameters:
                                -
                                    name: "operation"
                                    in: "path"
                                    required: true
                                    type: "string"
                            response:
                                "200":
                                    description: "200 response"
                                    schema:
                                        $ref: "#/definitions/Empty"
                            security:
                                - sigv4: []
                            x-amazon-apigateway-integration:
                                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}/invocations"
                                responses:
                                    default:
                                        statusCode: "200"
                                passthroughBehavior: "when_no_match"
                                httpMethod: "POST"
                                contentHandling: "CONVERT_TO_TEXT"
                                type: "aws_proxy"
                securityDefinitions:
                    sigv4:
                        type: "apiKey"
                        name: "Authorization"
                        in: "header"
                        x-amazon-apigateway-authtype: "awsSigv4"
                definitions:
                    Empty:
                        type: "object"
                        title: "Empty Schema"

    Deployment:
        Type: AWS::ApiGateway::Deployment
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W68
                        reason: Supress UsagePlan requirement
        Properties:
            Description: !Sub [
                "(${x0}) created by ${AWS::StackName}", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ]
                }
            ]
            RestApiId: !Ref RestApi
            StageName: !FindInMap [
                "Solution",
                "APIGateway",
                "StageName"
            ]
            StageDescription:
                Description: !Sub [
                    "(${x0}) created by ${AWS::StackName}", {
                        x0: !FindInMap [
                            "Solution",
                            "Project",
                            "LowerCaseId"
                        ]
                    }
                ]
                LoggingLevel: ERROR
                AccessLogSetting:
                    DestinationArn: !Sub [
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/apigateway/access-logs/${x0}/${RestApi}", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ]
                        }
                    ]
                    Format: "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.httpMethod $context.resourcePath $context.protocol\" $context.status $context.responseLength $context.requestId"
                MethodSettings:
                    -
                        ResourcePath: /~1{operation}
                        HttpMethod: GET
                        DataTraceEnabled: true
                        LoggingLevel: ERROR
                    -
                        ResourcePath: /~1{operation}
                        HttpMethod: POST
                        DataTraceEnabled: true
                        LoggingLevel: ERROR

    OPTIONSOperation:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt ApiLambda.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub [
                "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${x0}/OPTIONS/*", {
                    x0: !FindInMap [
                        "Solution",
                        "APIGateway",
                        "StageName"
                    ]
                }
            ]

    GETOperation:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt ApiLambda.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub [
                "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${x0}/GET/*", {
                    x0: !FindInMap [
                        "Solution",
                        "APIGateway",
                        "StageName"
                    ]
                }
            ]

    POSTOperation:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt ApiLambda.Arn
            Principal: apigateway.amazonaws.com
            SourceArn: !Sub [
                "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${x0}/POST/*", {
                    x0: !FindInMap [
                        "Solution",
                        "APIGateway",
                        "StageName"
                    ]
                }
            ]


    ################################################################################
    #
    # Webapp resources
    # * S3 Bucket to host web application, Amazon CloudFront distribution with OAID
    # * Custom Resource to copy web contents
    #
    ################################################################################
    WebBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
            BucketName: !Sub [
                "${x0}-${x1}-${AWS::AccountId}-${AWS::Region}-web", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    -
                      ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
            AccessControl: LogDeliveryWrite
            LoggingConfiguration:
                DestinationBucketName: !Ref LogsBucket
                LogFilePrefix: "access_logs_web_bucket/"
            WebsiteConfiguration:
                IndexDocument: index.html
                ErrorDocument: index.html
            CorsConfiguration:
                CorsRules:
                    -
                        AllowedMethods:
                            - "GET"
                            - "PUT"
                            - "POST"
                            - "HEAD"
                        AllowedOrigins:
                            - "*"
                        AllowedHeaders:
                            - "*"
                        ExposedHeaders:
                            - "ETag"
                            - "Content-Length"
                        MaxAge: 3000
            LifecycleConfiguration:
                Rules:
                    -
                        Id: "Use Intelligent tier"
                        Status: Enabled
                        Transitions:
                            -
                                StorageClass: INTELLIGENT_TIERING
                                TransitionInDays: 0
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 7
                    -
                        Id: "Keep previous version for 7 days"
                        Status: Enabled
                        NoncurrentVersionExpirationInDays: 7
                        AbortIncompleteMultipartUpload:
                            DaysAfterInitiation: 1
            Tags:
                -
                    Key: SolutionId
                    Value: !FindInMap ["Solution", "Project", "LowerCaseId"]
            VersioningConfiguration:
                Status: Enabled

    OriginAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: !Sub "access-identity-${WebBucket}"

    WebBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: F16
                        reason: "website bucket policy requires a wildcard principal"
        Properties:
            Bucket: !Ref WebBucket
            PolicyDocument:
                Statement:
                    -
                        Effect: Deny
                        Principal: "*"
                        Action: "*"
                        Resource: !Sub "arn:aws:s3:::${WebBucket}/*"
                        Condition:
                            Bool:
                                "aws:SecureTransport": false
                    -
                        Effect: Allow
                        Action: "s3:GetObject"
                        Resource: !Sub "arn:aws:s3:::${WebBucket}/*"
                        Principal:
                            CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

    # (Custom Resource) copy web content to web bucket
    # Returns:
    #   * Uploaded
    #   * LastUpdated
    #   * Status
    CopyWebContent:
        Type: Custom::CopyWebContent
        Properties:
            ServiceToken: !GetAtt CustomResourceLambda.Arn
            Data:
                SolutionId: !FindInMap [
                    "Solution",
                    "Project",
                    "LowerCaseId"
                ]
                Source:
                    Bucket: !Sub [
                        "${x0}${x1}", {
                            x0: !FindInMap [
                                "Solution",
                                "Template",
                                "S3Bucket"
                            ],
                            x1: !If [
                                bSingleRegion,
                                "",
                                !Sub "-${AWS::Region}"
                            ]
                        }
                    ]
                    Key: !Sub [
                        "${x0}/${x1}", {
                            x0: !FindInMap [
                                "Solution",
                                "Template",
                                "KeyPrefix"
                            ],
                            x1: !FindInMap [
                                "Solution",
                                "Package",
                                "WebApp"
                            ]
                        }
                    ]
                Destination:
                    Bucket: !Ref WebBucket

    CloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Comment: "Webapp distribution for shot detection demo"
                Origins:
                    -
                        Id: !Sub "S3-${WebBucket}"
                        DomainName: !If [
                            bUSEast1,
                            !Sub "${WebBucket}.s3.amazonaws.com",
                            !Sub "${WebBucket}.s3.${AWS::Region}.amazonaws.com"
                        ]
                        S3OriginConfig:
                            OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"
                DefaultCacheBehavior:
                    TargetOriginId: !Sub "S3-${WebBucket}"
                    AllowedMethods:
                        - OPTIONS
                        - HEAD
                        - GET
                    CachedMethods:
                        - OPTIONS
                        - HEAD
                        - GET
                    ForwardedValues:
                        QueryString: false
                    ViewerProtocolPolicy: redirect-to-https
                DefaultRootObject: index.html
                CustomErrorResponses:
                    -
                        ErrorCode: 403
                        ResponsePagePath: /404.html
                        ResponseCode: 200
                    -
                        ErrorCode: 404
                        ResponsePagePath: /404.html
                        ResponseCode: 200
                IPV6Enabled: true
                ViewerCertificate:
                    CloudFrontDefaultCertificate: true
                Enabled: true
                HttpVersion: http2
                PriceClass: !Select [
                    0,
                    !Split [
                        "]",
                        !Select [
                            1,
                            !Split [
                                "[",
                                !Ref PriceClass
                            ]
                        ]
                    ]
                ]
                Logging:
                    Bucket: !Sub "${LogsBucket}.s3.amazonaws.com"
                    Prefix: access_logs_cloudfront/
                    IncludeCookies: true

    # (Custom Resource) to copy webapp to web bucket
    # Returns:
    #   * Status
    PostUpdateWebBucketCORS:
        Type: Custom::PostUpdateBucketCORS
        Properties:
            ServiceToken: !GetAtt CustomResourceLambda.Arn
            Data:
                Bucket: !Ref WebBucket
                AllowedOrigins:
                    - !Sub "https://${CloudFrontDistribution.DomainName}"
                AllowedMethods:
                    - HEAD
                    - GET
                    - PUT
                    - POST
                AllowedHeaders:
                    - "*"
                ExposeHeaders:
                    - Content-Length
                    - ETag
                MaxAgeSeconds: 3000

    # (Custom Resource) update source bucket CORS
    # Returns:
    #   * Status
    PostUpdateSourceBucketCORS:
        Type: Custom::PostUpdateBucketCORS
        Properties:
            ServiceToken: !GetAtt CustomResourceLambda.Arn
            Data:
                Bucket: !Ref SourceBucket
                AllowedOrigins:
                    - !Sub "https://${CloudFrontDistribution.DomainName}"
                AllowedMethods:
                    - HEAD
                    - GET
                    - PUT
                    - POST
                AllowedHeaders:
                    - "*"
                ExposeHeaders:
                    - Content-Length
                    - ETag
                MaxAgeSeconds: 3000

    # (Custom Resource) create solution manifest for webapp
    # Returns:
    #   * Status
    PostCreateSolutionManifest:
        Type: Custom::PostCreateSolutionManifest
        Properties:
            ServiceToken: !GetAtt CustomResourceLambda.Arn
            Web:
                Bucket: !Ref WebBucket
            Data:
                SolutionId: !FindInMap [
                    "Solution",
                    "Project",
                    "LowerCaseId"
                ]
                Version: !FindInMap [
                    "Solution",
                    "Project",
                    "Version"
                ]
                StackName: !Sub "${AWS::StackName}"
                Region: !Sub "${AWS::Region}"
                LastUpdated: !GetAtt CopyWebContent.LastUpdated
                S3:
                    Bucket: !Ref SourceBucket
                    UseAccelerateEndpoint: true
                ApiEndpoint: !Sub [
                    "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${x0}", {
                        x0: !FindInMap [
                            "Solution",
                            "APIGateway",
                            "StageName"
                        ]
                    }
                ]
                Cognito:
                    UserPoolId: !Ref CognitoUserPool
                    ClientId: !Ref CognitoAppClient
                    IdentityPoolId: !Ref CognitoIdentityPool
                    RedirectUri: !Sub "https://${CloudFrontDistribution.DomainName}"
                StateMachine:
                    Name: !GetAtt ShotDetectionStateMachine.Name


    ################################################################################
    #
    # Cognito resources
    # * Authenticated User IAM role, UserPool, IdentityPool, AppClient, register user
    #
    ################################################################################
    CognitoUserPool:
        Type: AWS::Cognito::UserPool
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: F78
                        reason: "Disable MFA check"
        Properties:
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: true
                InviteMessageTemplate:
                  EmailSubject: "You are invited to Amazon Rekognition Shot Detection Demo portal (GitHub sample code project)"
                  EmailMessage:
                    !Sub
                        - |-
                            <html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schema=s-microsoft-com:office:word" xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" xmlns="http://www.w3.org/TR/REC-html40">
                            <head>
                            <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                            <meta name="Generator" content="Microsoft Word 15 (filtered medium)">
                            <style>
                                @font-face {
                                font-family: "Cambria Math"; panose-1: 2 4 5 3 5 4 6 3 2 4;
                                }
                                @font-face {
                                font-family: DengXian; panose-1: 2 1 6 0 3 1 1 1 1 1;
                                }
                                @font-face {
                                font-family: Calibri; panose-1: 2 15 5 2 2 2 4 3 2 4;
                                }
                                @font-face {
                                font-family: "@DengXian"; panose-1: 2 1 6 0 3 1 1 1 1 1;
                                }
                                @font-face {
                                font-family: "Amazon Ember"; panose-1: 2 11 6 3 2 2 4 2 2 4;
                                }

                                p.MsoNormal, li.MsoNormal, div.MsoNormal {
                                margin: 0in;
                                margin-bottom: .0001pt;
                                font-size: 12.0pt;
                                font-family: "Calibri", sans-serif;
                                }

                                h2 {
                                mso-style-priority: 9;
                                mso-style-link: "Heading 2 Char";
                                mso-margin-top-alt: auto;
                                margin-right: 0in;
                                mso-margin-bottom-alt: auto;
                                margin-left: 0in;
                                font-size: 18.0pt;
                                font-family: "Calibri", sans-serif;
                                font-weight: bold;
                                }

                                a, span.MsoHyperlink {
                                mso-style-priority: 99;
                                color: #0563C1;
                                }

                                span.EmailStyle17 {
                                mso-style-type: personal-compose;
                                font-family: "Calibri", sans-serif;
                                color: windowtext;
                                }

                                span.Heading2Char {
                                mso-style-name: "Heading 2 Char";
                                mso-style-priority: 9;
                                mso-style-link: "Heading 2";
                                font-family: "Calibri", sans-serif;
                                font-weight: bold;
                                }

                                .MsoChpDefault {
                                mso-style-type: export-only;
                                font-family: "Calibri", sans-serif;
                                }

                                @page WordSection1 {
                                size: 8.5in 11.0in;
                                margin: 1.0in 1.0in 1.0in 1.0in;
                                }

                                div.WordSection1 {
                                page: WordSection1;
                                }

                                .MainContent {
                                font-variant-ligatures: normal;
                                font-variant-caps: normal;
                                orphans:2;
                                text-align:start;
                                widows:2;
                                -webkit-text-stroke-width: 0px;
                                text-decoration-style:initial;
                                text-decoration-color:initial;
                                word-spacing:0px;
                                font-size:13.5pt;
                                }

                                .SubContent {
                                font-family:'Amazon Ember',sans-serif;
                                color:#333333"
                                }
                            </style>
                            </head>

                            <body lang="EN-US" link="#0563C1" vlink="#954F72">
                            <div class="WordSection1">
                                <h2>
                                <span class="SubContent">
                                    Welcome to Amazon Rekognition Shot Detection Demo portal (GitHub sample code project)<o:p></o:p>
                                </span>
                                </h2>

                                <p class="MainContent" style="padding-bottom:30px;">
                                <span class="SubContent">
                                    Use the provided user name and temporary password to log in for the first time.<o:p></o:p>
                                </span>
                                </p>

                                <p class="MainContent">
                                <span class="SubContent">
                                    User name: <b>{username}</b><o:p></o:p>
                                </span>
                                </p>

                                <p class="MainContent">
                                <span class="SubContent">
                                    Temporary password: <b>{####}</b><o:p></o:p>
                                </span>
                                <br/>
                                <span class="SubContent" style="font-size:10pt;">
                                    (After you log in with your temporary password, you will be prompted to create a new one.)<o:p></o:p>
                                </span>
                                </p>

                                <p class="MainContent" style="padding-bottom:30px;">
                                <span class="SubContent">
                                    Open the link to log in:<o:p></o:p>
                                    <br/>
                                    <span style="color:#007DBC">
                                        <a href="${url}" target="_blank">${url}</a><o:p></o:p>
                                    </span>
                                </span>
                                </p>

                                <p class="MainContent" style="padding-top: 30pt;">
                                <span class="SubContent" style="font-size:12pt;">
                                    <i>Team AWS Specialist AI/ML</i><o:p></o:p>
                                </span>
                                </p>

                                <p class="MsoNormal">
                                <span style="font-size:11.0pt">
                                    <o:p>&nbsp;</o:p>
                                </span>
                                </p>
                            </div>
                            </body>
                            </html>
                        - {
                            url: !Sub "https://${CloudFrontDistribution.DomainName}",
                        }
            AliasAttributes:
                - email
            AutoVerifiedAttributes:
                - email
            MfaConfiguration: 'OFF'
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: true
                    RequireNumbers: true
                    RequireSymbols: false
                    RequireUppercase: true
            UserPoolName: !Sub [
                "${x0}-${x1}-userpool", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]

    CognitoAppClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: !Sub [
                "${x0}-${x1}-appclient", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            RefreshTokenValidity: 30
            UserPoolId: !Ref CognitoUserPool

    CognitoIdentityPool:
        Type: AWS::Cognito::IdentityPool
        Properties:
            IdentityPoolName: !Sub [
                "${x0}_${x1}_identity_pool", {
                    x0: !FindInMap [
                        "Solution",
                        "Project",
                        "LowerCaseId"
                    ],
                    x1: !Select [
                        4,
                        !Split [
                            "-",
                            !Select [
                                2,
                                !Split [
                                    "/",
                                    !Sub "${AWS::StackId}"
                                ]
                            ]
                        ]
                    ]
                }
            ]
            AllowUnauthenticatedIdentities: false
            CognitoIdentityProviders:
                -
                  ClientId: !Ref CognitoAppClient
                  ProviderName: !GetAtt CognitoUserPool.ProviderName
                  ServerSideTokenCheck: false

    AuthenticatedUserRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as the authenticated cognito role needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: "Allow"
                        Principal:
                            Federated: "cognito-identity.amazonaws.com"
                        Action: "sts:AssumeRoleWithWebIdentity"
                        Condition:
                            StringEquals:
                                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
                            ForAnyValue:StringLike:
                                cognito-identity.amazonaws.com:amr: "authenticated"
            Path: /
            Policies:
                -
                    PolicyName: !Sub [
                        "${x0}-cognito-auth-user", {
                            x0: !FindInMap [
                                "Solution",
                                "Project",
                                "LowerCaseId"
                            ]
                        }
                    ]
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## Cognito
                            -
                                Effect: "Allow"
                                Action: "cognito-identity:GetId"
                                Resource: !Sub "arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${CognitoIdentityPool}"
                            ## API Gateway
                            -
                                Effect: "Allow"
                                Action: "execute-api:Invoke"
                                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*"
                            ## S3
                            -
                                Effect: "Allow"
                                Action:
                                    - "s3:GetObject"
                                    - "s3:PutObject"
                                    - "s3:ListBucket"
                                Resource:
                                    - !Sub "arn:aws:s3:::${SourceBucket}"
                                    - !Sub "arn:aws:s3:::${SourceBucket}/*"

    CognitoIdentityPoolRoleAttachment:
        Type: AWS::Cognito::IdentityPoolRoleAttachment
        Properties:
            IdentityPoolId: !Ref CognitoIdentityPool
            Roles:
                authenticated: !GetAtt AuthenticatedUserRole.Arn

    # (Custom Resource) create coginto user, returns
    #   * Username
    #   * Status
    CognitoRegisterUser:
        DependsOn: PostCreateSolutionManifest
        Type: Custom::CognitoRegisterUser
        Properties:
            ServiceToken: !GetAtt CustomResourceLambda.Arn
            Data:
                UserPoolId: !Ref CognitoUserPool
                Email: !Ref Email


Outputs:
    # Layers
    AwsSdkLayerArn:
        Value: !Ref AwsSdkLayer
        Description: Lambda Layer (AWS SDK Library)
    CoreLibLayerArn:
        Value: !Ref CoreLibLayer
        Description: Lambda Layer (Core Library)
    MediainfoLayerArn:
        Value: !Ref MediainfoLayer
        Description: Lambda Layer (Mediainfo)
    # Custom Resource
    CustomResourceRoleArn:
        Value: !GetAtt CustomResourceRole.Arn
        Description: IAM Role Arn (Custom Resource)
    CustomResourceLambdaArn:
        Value: !GetAtt CustomResourceLambda.Arn
        Description: Lambda Arn (Custom Resource)
    ## Buckets
    LogsBucket:
        Value: !Ref LogsBucket
        Description: Bucket (Logs)
    SourceBucket:
        Value: !Ref SourceBucket
        Description: Bucket (Source)
    WebBucket:
        Value: !Ref WebBucket
        Description: Bucket (Web)
    ## API Gateway
    ApiLambdaArn:
        Value: !GetAtt ApiLambda.Arn
        Description: Lambda Arn (POST request)
    ApiRoleArn:
        Value: !GetAtt ApiRole.Arn
        Description: IAM Role Arn (API Lambda)
    RestApiId:
        Value: !Ref RestApi
        Description: API Id
    RestApiEndpoint:
        Value: !Sub [
            "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${x0}", {
                x0: !FindInMap [
                    "Solution",
                    "APIGateway",
                    "StageName"
                ]
            }
        ]
        Description: API Endpoint
    ## Cognito related
    CognitoUserPoolId:
        Value: !Ref CognitoUserPool
        Description: "User Pool ID (Cognito)"
    CognitoUserPoolArn:
        Value: !GetAtt CognitoUserPool.Arn
        Description: "User Pool Arn (Cognito)"
    CognitoUserPoolProviderName:
        Value: !GetAtt CognitoUserPool.ProviderName
        Description: "User Pool Provider Name (Cognito)"
    CognitoUserPoolProviderURL:
        Value: !GetAtt CognitoUserPool.ProviderURL
        Description: "User Pool Provider Url (Cognito)"
    CognitoAppClientId:
        Value: !Ref CognitoAppClient
        Description: "App Client ID (Cognito)"
    CognitoIdentityPoolId:
        Value: !Ref CognitoIdentityPool
        Description: "Identity Pool (Cognito)"
    CognitoIdentityPoolName:
        Value: !GetAtt CognitoIdentityPool.Name
        Description: "Identity Pool Name (Cognito)"
    CognitoRegisterUser:
        Value: !GetAtt CognitoRegisterUser.Username
        Description: "Registered Username (Cognito)"
    AuthenticatedUserRoleArn:
        Value: !GetAtt AuthenticatedUserRole.Arn
        Description: IAM Role Arn (Cognito Authenticated User)
    ## WebApp related
    CloudFrontDistributionId:
        Value: !Ref CloudFrontDistribution
        Description: Id (CloudFront Distribution)
    DemoPortal:
        Value: !Sub https://${CloudFrontDistribution.DomainName}
        Description: "Demo Portal (WebApp)"
